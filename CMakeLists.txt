cmake_minimum_required(VERSION 3.8.2)

project(pulsar)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules/" ${CMAKE_MODULE_PATH})

# configuration
# Debug, Release, RelWithDebInfo, MinSizeRel
set(CMAKE_BUILD_TYPE Debug)
# set(CMAKE_VERBOSE_MAKEFILE OFF)
# set(PULSAR_PROFILE OFF)

# don't change anything below this line
set(CMAKE_CXX_STANDARD 17)

find_package(Boost 1.58.0 COMPONENTS system REQUIRED)
find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)
find_package(yaml-cpp REQUIRED)

# FIXME how to enable only in Debug build type?
add_definitions(-Og)

add_definitions(-fPIC)
add_definitions(-Wfatal-errors -Werror)
# FIXME this has to be disabled because CLANG rejects
# -Wno-unused-but-set-variable
# add_definitions(-Wall -Wextra)

# FIXME this is only needed for the autogenerated dbus
# adaptor header
# add_definitions(-Wno-unused-but-set-variable)

# . gives us pulsar/ so it is not a system directory
include_directories(.)
include_directories(SYSTEM ${Boost_INCLUDE_DIR})
include_directories(SYSTEM ext/)

option(BUILD_DOC "Build documentation" ON)

if (PULSAR_PROFILE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
endif (PULSAR_PROFILE)

add_library(
    pulsar SHARED

    pulsar/async.cxx
    pulsar/audio.cxx
    pulsar/audio.util.cxx
    pulsar/config.cxx
    pulsar/daemon.cxx
    pulsar/debug.cxx
    pulsar/domain.cxx
    pulsar/ladspa.cxx
    pulsar/library.cxx
    pulsar/node.cxx
    pulsar/property.cxx
    pulsar/system.cxx
    pulsar/thread.cxx
    pulsar/util.cxx
)

add_library(
    logjam STATIC

    ext/logjam/logjam.cxx
)

add_executable(
    pulsar-dev

    pulsar-dev.cxx
)

target_link_libraries(pulsar ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(pulsar ${Boost_LIBRARIES})
target_link_libraries(pulsar dl)
target_link_libraries(pulsar logjam)
target_link_libraries(pulsar yaml-cpp)

target_link_libraries(pulsar-dev pulsar stdc++)

find_package(JACK)

if (JACK_FOUND)
    add_definitions(-DCONFIG_HAVE_JACKAUDIO)
    target_sources(pulsar PRIVATE pulsar/jackaudio.cxx)
    target_link_libraries(pulsar ${JACK_LIBRARY})
endif (JACK_FOUND)

find_package(Portaudio)

if (PORTAUDIO_FOUND)
    add_definitions(-DCONFIG_HAVE_PORTAUDIO)
    target_sources(pulsar PRIVATE pulsar/portaudio.cxx)
    target_link_libraries(pulsar ${PORTAUDIO_LIBRARY})
endif (PORTAUDIO_FOUND)

pkg_check_modules(DBUSLIB dbus-c++-1)

if (DBUSLIB_FOUND)
    add_custom_command(
        OUTPUT pulsar/dbus.adaptor.h
        COMMAND dbusxx-xml2cpp pulsar/dbus.adaptor.xml --adaptor=pulsar/dbus.adaptor.h
        DEPENDS pulsar/dbus.adaptor.xml
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )

    add_definitions(-DCONFIG_HAVE_DBUS)
    target_compile_options(pulsar PUBLIC ${DBUSLIB_CFLAGS_OTHER})
    include_directories(SYSTEM ${DBUSLIB_INCLUDE_DIRS})
    target_sources(pulsar PRIVATE pulsar/dbus.cxx pulsar/dbus.adaptor.h )
    target_link_libraries(pulsar ${DBUSLIB_LIBRARIES})
endif (DBUSLIB_FOUND)

find_package(Doxygen)

if (DOXYGEN_FOUND)
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/etc/Doxyfile.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    # request to configure the file
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    message("Setting up Doxygen")

    # note the option ALL which allows to build the docs together with the application
    add_custom_target(docs
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM )
else (DOXYGEN_FOUND)
  message("Doxygen missing: documentation will not be built")
endif (DOXYGEN_FOUND)
