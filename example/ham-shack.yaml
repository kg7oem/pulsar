# This is a real world working example of the configuration in use in my
# HAM radio station. The control_microphone chain is controlled by a perl
# script which makes it follow the state of the PTT on the radio. This is
# used so that a live shoutcast stream only includes the microphone audio
# when the radio is transmitting and not the audio from the room all the
# time.
#
# The remove_squelch_tail chain is used to chop off the end of received
# transmissions. The squelch tail is the pssssssht that is heard on
# two way FM radios when the other station stops transmitting. The
# combination of the delay and gate is very effective and removing this.
# See https://www.qrz.com/lookup/kg7oem#RemovingSquelchTails for more
# info.

---

engine:
  logs:
    console_level: info
    memory_level: trace

templates:
  gate:
    class: pulsar::ladspa::node
    plugin:
      filename: /usr/local/lib/ladspa/ZamGate-ladspa.so

  delay:
    class: pulsar::ladspa::node
    plugin:
      filename: /usr/lib/ladspa/delay_1898.so
      id: 1899

chains:
  control_microphone:
    channels: 1
    state:
      - gate:*
    config:
      - gate:Max gate close
    forward:
      in_1:
        - gate:*
    nodes:
      - name: gate
        template: gate
        config:
          Threshold: 0
          Attack: 25
          Release: 25
          Max gate close: -.inf
        forward:
          Audio Output 1: control_microphone:out_1

  remove_squelch_tail:
    channels: 1
    config:
      - gate:Max gate close
    state:
      - gate:*
    forward:
      in_1:
        - delay:Input
        - gate:Sidechain Input
    nodes:
      - name: delay
        template: delay
        config:
          Delay Time (s): .1
          Max Delay (s): .2
        link:
          Output: gate:Audio Input 1
      - name: gate
        template: gate
        config:
          Sidechain: 1
          Threshold: -65
          Attack: 25
          Release: 25
          Max gate close: -.inf
        forward:
          Audio Output 1: remove_squelch_tail:out_1

daemons:
  watch_jack_connections:
    class: pulsar::jackaudio::connections
    config:
      connect:
        - [ "Network In:out_1", "IC-7100 Out:playback_1" ]
        - [ system:capture_2, ModPro:microphone_in_1 ]
        - [ ModPro:microphone_out_1, system:playback_2 ]
        - [ happytime:from_slave_1, "IC-7100:playback_1" ]
        - [ ModPro:receive_out_1, happytime:to_slave_1 ]
        - [ "IC-7100 In:capture_1", "Comptroller Out:in_1" ]
        - [ ModPro:receive_out_1, "Comptroller Out:in_2" ]
        - [ system:capture_1, "Comptroller Out:in_3" ]
        - [ system:capture_2, "Comptroller Out:in_4" ]
        - [ system:capture_1, ModPro:transmit_in_1 ]
        - [ ModPro:transmit_out_1, "IC-7100 Out:playback_1" ]
        - [ "IC-7100 In:capture_1", ModPro:receive_in_1 ]
        - [ ModPro:receive_out_1, system:playback_1 ]
        - [ ModPro:receive_out_1, "Network Out:in_1" ]
        - [ ModPro:receive_out_1, "Rex Out:in_1" ]
        - [ ModPro:receive_out_1, "Liv Room Out:in_1" ]

        - [ ModPro:receive_out_1, ffmpeg:input_1 ]
        - [ ModPro:receive_out_1, ffmpeg:input_2 ]
        - [ system:capture_1, ffmpeg:input_1 ]
        - [ system:capture_1, ffmpeg:input_2 ]

domain:
  config:
    sample_rate: 48000
    buffer_size: 1024
  nodes:
    - name: jack
      class: pulsar::jackaudio::node
      config:
        client_name: ModPro
        # reduce sensitivity because of interrupt isues on test
        # hardware
        watchdog_timeout_ms: 100
      inputs:
        - microphone_out_1
        - receive_out_1
        - transmit_out_1
      outputs:
        - microphone_in_1
        - transmit_in_1
        - receive_in_1
      link:
        receive_in_1: remove_tail
        microphone_in_1: control_microphone
        transmit_in_1: jack:transmit_out_1

    - name: control_microphone
      chain: control_microphone
      link:
        out_1: jack:microphone_out_1

    - name: remove_tail
      chain: remove_squelch_tail
      link:
        out_1: jack:receive_out_1
